swagger: "2.0"
info:
  description: "This is a sample API that you can create users, buy and sale bitcoin that have a real bitcoin price from coinmarketcap API."
  version: "1.0.0"
  title: "RV API Golang"
  contact:
    email: "diego93rodrigues@gmail.com"
host: "localhost:8080"
basePath: "/"
schemes:
- "http"
paths:
  /login:
    post:
      tags:
      - "Login"
      summary: "Need the login to get the token necessary to use others api paths"
      description: "Returns a bearer token"
      operationId: "Login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: 
      - in: "body"
        name: "body"
        description: "Object that needs to login"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginSuccess"
      security:
        - Bearer: []
  /users:
    get:
      tags:
      - "Users"
      summary: "Get a list of registered users"
      description: "The returns is limited to 100 users"
      operationId: "GetUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Users"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
    post:
      tags:
      - "Users"
      summary: "Add a new user"
      description: ""
      operationId: "CreateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Users"
        422: 
          description: "Required some field or invalid input"
        500:
          description: "E-mail already registered"
      security:
        - Bearer: []
  /users/{id}:
    get:
      tags:
      - "Users"
      summary: "Get user by ID"
      description: "Return a user by ID"
      operationId: "GetUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        required: true
        description: "The Unique identifier of the user"
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Users"
        400:
          description: "Id parameter is invalid"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
    put:
      tags:
      - "Users"
      summary: "Update a user by ID"
      description: ""
      operationId: "UpdateBuy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        required: true
        description: "The Unique identifier of the user"
        type: "integer"
      - in: "body"
        name: "body"
        description: "User object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Users"
        400:
          description: "Id parameter is invalid"
        401: 
          description: "Unauthorized"
        422: 
          description: "Required some field or invalid input"
      security:
        - Bearer: []
  /buys:
    get:
      tags:
      - "Buys"
      summary: "Get a list of buys that was made"
      description: "The returns is limited to 100 buys"
      operationId: "GetBuys"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BitcoinTransaction"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
    post:
      tags:
      - "Buys"
      summary: "Include a new buy"
      description: ""
      operationId: "CreateBuy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CreateBitcoinTransaction"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BitcoinTransaction"
        202:
          description: "Insufficient funds to do this operation"
          schema:
            $ref: "#/definitions/CreateBuyError"
        422: 
          description: "Required some field or invalid input"
      security:
        - Bearer: []
  /buys/{id}:
    get:
      tags:
      - "Buys"
      summary: "Get a list of buys that was made"
      description: ""
      operationId: "GetBuy"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        required: true
        description: "The Unique identifier of the buy"
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BitcoinTransaction"
        400:
          description: "Id parameter is invalid"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
  /sales:
    get:
      tags:
      - "Sales"
      summary: "Get a list of sales that was made"
      description: "The returns is limited to 100 sales"
      operationId: "GetSales"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BitcoinTransaction"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
    post:
      tags:
      - "Sales"
      summary: "Include a new sale"
      description: ""
      operationId: "CreateSale"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/CreateBitcoinTransaction"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BitcoinTransaction"
        202:
          description: "Insufficient biticoin amount to do this operation"
          schema:
            $ref: "#/definitions/CreateSaleError"
        422: 
          description: "Required some field or invalid input"
      security:
        - Bearer: []
  /sales/{id}:
    get:
      tags:
      - "Sales"
      summary: "Get a list of sales that was made"
      description: ""
      operationId: "GetSale"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        required: true
        description: "The Unique identifier of the sales"
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BitcoinTransaction"
        400:
          description: "Id parameter is invalid"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
  /reports/id/{id}:
    get:
      tags:
      - "Reports"
      summary: "Get a list of buys and sales by id"
      description: ""
      operationId: "GetReportsByUserId"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        required: true
        description: "The Unique identifier of the user"
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetByDate"
        400:
          description: "Id parameter is invalid"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
  /reports/date/{date}:
    get:
      tags:
      - "Reports"
      summary: "Get a list of buys and sales by date"
      description: ""
      operationId: "GetReportsByDate"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: date
        required: true
        description: "The date of a day you want to see buys and sales. \nExample: 2019-11-25"
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetByDate"
        400:
          description: "Date parameter is invalid"
        401: 
          description: "Unauthorized"
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
  LoginSuccess:
    type: "string"
    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VyX2lkIjo0fQ.wYYnaWw5hbtArtqKyuGQoOl2-txdo5AB6kogm6gP6NI"
  Users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint32"
      fullname:
        type: "string"
        example: "User test response"
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
      birthdate:
        type: "string"
        format: "date"
      balance:
        type: "integer"
        format: "float64"
      total_bitcoin_amount:
        type: "integer"
        format: "float64"
      created_at:
        type: "string"
        format: "date-time"
  CreateUser:
    type: "object"
    required:
    - "fullname"
    - "email"
    - "password"
    - "birthdate"
    properties:
      fullname:
        type: "string"
        example: "User test response"
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
      birthdate:
        type: "string"
        format: "date"
  BitcoinTransaction:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "uint64"
      bitcoin_amount:
        type: "integer"
        format: "float64"
        example: 0.0754
      author:
        $ref: "#/definitions/Users"
      author_id: 
        type: "integer"
        format: "uint32"
      bitcoin_price:
        type: "integer"
        format: "float64"
        example: 7120.043054
      total_bitcoin_price:
        type: "integer"
        format: "float64"
        example: 536.8512462716
      created_at:
        type: "string"
        format: "date-time"
  CreateBitcoinTransaction:
    type: "object"
    required:
    - "bitcoin_amount"
    - "author_id"
    properties:
      bitcoin_amount:
        type: "integer"
        format: "float64"
        example: 0.0454
      author_id: 
        type: "integer"
        format: "uint32"
  GetByDate:
    type: object
    properties:
      buys:
        type: "array"
        items:
          $ref: '#/definitions/BitcoinTransaction'
      sales:
        type: "array"
        items:
          $ref: '#/definitions/BitcoinTransaction'
  CreateBuyError:
    type: "object"
    properties:
      error:
        type: "string"
        example: "Insufficient funds. Your current balance is: 'x' Your current Buy price is 'y'"
  CreateSaleError:
    type: "object"
    properties:
      error:
        type: "string"
        example: "Insufficient Biticoin amount. Your current amount is: x"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"